# -*- fill-column: 76; -*-
#+TITLE: Tutorial: Basic01
#+OPTIONS: ^:nil

Welcome to the first step in this XDP-tutorial.

The programming language for XDP is eBPF (Extended Berkeley Packet Filter) which
we will just refer to as BPF. Thus, this tutorial will also be relevant for
learning how to write other BPF program.  The focus is on BPF programs
that can be used in the XDP-hook.

* First step: setup dependencies

There are a number of setup dependencies, that need to in-order to compile the
source code in this git-repository. Please go read and complete the
[[file:../setup_dependencies.org]] guide.

Return here, and see if the next step compiles.

* Compiling example code

If you completed the setup dependencies guide, then you should be able to
simply run the =make= command, in this directory. (The [[file:Makefile][Makefile]] will try to
be nice and detect if you didn't complete the setup steps).

** Simple XDP code

The very simple XDP code used in this step is located in
file:xdp_pass_kern.c, and displayed below:

#+begin_src C
SEC("xdp")
int  xdp_prog_simple(struct xdp_md *ctx)
{
        return XDP_PASS;
}
#+end_src

** Compiling process

The LLVM+clang compiler turns this restricted-C code into BPF-byte-code and
store it in an ELF-object file, named =xdp_pass_kern.o=.

** Looking into the BPF-ELF object

You can inspect the contents of the =xdp_pass_kern.o= file with different
tools like =readelf= or =llvm-objdump=. As the Makefile compiled with debug
options =-g= (LLVM version >= 4.0), llvm-objdump tool can annotate
assembler output with the original C code:

Run: =llvm-objdump -S xdp_pass_kern.o=
#+begin_example asm
xdp_pass_kern.o:	file format ELF64-BPF

Disassembly of section xdp:
xdp_prog_simple:
; {
       0:	b7 00 00 00 02 00 00 00 	r0 = 2
; return XDP_PASS;
       1:	95 00 00 00 00 00 00 00 	exit
#+end_example

If you don't care to see the raw-BPF instrutions add: =-no-show-raw-insn=.
The define/enum XDP_PASS have value 2, as can be seen in the dump. The
section name "xdp" was defined by =SEC("xdp")=, and the =xdp_prog_simple:=
is our C-function name.

