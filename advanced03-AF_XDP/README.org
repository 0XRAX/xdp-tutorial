# -*- fill-column: 76; -*-
#+TITLE: Advanced: XDP userspace delivery via AF_XDP
#+OPTIONS: ^:nil

It is important to understand that XDP in-itself is not a kernel bypass
facility. XDP is an *in-kernel* fast-path, that operates on raw-frames
"inline" before they reach the normal Linux Kernel network stack.

To support fast delivery of /raw-frames into userspace/, XDP can *bypass*
the Linux Kernel network stack via XDP_REDIRECT'ing into a special BPF-map
containing AF_XDP sockets. The AF_XDP socket is an new Address Family type.

The kernel documentation for AF_XDP:
- https://www.kernel.org/doc/html/latest/networking/af_xdp.html

* Lessons

** Where does AF_XDP performance come from?

The AF_XDP socket is really fast, but what the secret behind this
performance boost?

One of the basic ideas behind AF_XDP dates back to [[https://en.wikipedia.org/wiki/Van_Jacobson][Van Jacobson]]'s talk about
[[https://lwn.net/Articles/169961/][network channels]]. It is about creating a Lock-free [[https://lwn.net/Articles/169961/][channel]] directly from
driver RX-queue into an (AF_XDP) socket.

The basic queues used by AF_XDP are Single-Producer/Single-Consumer (SPSC)
descriptor ring queues:

- The *Single*-/Producer/ (SP) bind to specific RX-*/queue id/*, and
  NAPI-softirq assures only 1-CPU process 1-RX-queue id (per scheduler
  interval).

- The *Single*-/Consumer/ (SC) is one-application, with a (bounded) buffer
  pool (UMEM) allocated by userspace (register with kernel). Reading
  descriptors from a ring, that point into UMEM. /No memory allocation/, but
  return frames to UMEM in timely manner.

The [[http://www.lemis.com/grog/Documentation/vj/lca06vj.pdf][transport signature]] that Van Jacobson talked about, are replaced by the
XDP/eBPF program choosing which AF_XDP socket to XDP_REDIRECT into.


