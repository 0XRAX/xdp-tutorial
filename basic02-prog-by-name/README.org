# -*- fill-column: 76; -*-
#+TITLE: Tutorial: Basic02
#+OPTIONS: ^:nil

In this assignment you will see that an BPF-ELF file produced by LLVM can
contain more than one XDP program, and how you can select between them using
the *libbpf API*.

* Table of Contents                                                     :TOC:
- [[#lessons-using-libbpf][Lessons using libbpf]]
  - [[#lesson1-bpf_object][Lesson#1: bpf_object]]
  - [[#lesson2-bpf_object-to-bpf_program][Lesson#2: bpf_object to bpf_program]]
- [[#assignments][Assignments]]
  - [[#assignment1-setup-testlab][Assignment#1: Setup testlab]]
  - [[#assignment2-add-xdp_abort-program][Assignment#2: Add xdp_abort program]]

* Lessons using libbpf

The libbpf API provides more than the basic system call wrappers (which are
defined in libbpf [[https://github.com/libbpf/libbpf/blob/master/src/bpf.h][bpf.h]]). The libbpf API provides "[[https://github.com/libbpf/libbpf/blob/master/src/README.rst#objects][objects]]" and functions to
work with them (defined in include [[https://github.com/libbpf/libbpf/blob/master/src/libbpf.h][libbpf.h]]).

The corresponding object struct's are:
 - struct =bpf_object=
 - struct =bpf_program=
 - struct =bpf_map=

These structs are for libbpf internal use, and you must use the API
functions to interact with the objects. Functions that work with an object
have the struct name plus double underscore, and then part that describes
function purpose.

Lets look at a practical usage of =bpf_object= and =bpf_program=.

** Lesson#1: bpf_object

In [[file:xdp_loader.c]] the function =__load_bpf_object_file()= now returns a
libbpf struct =bpf_object= pointer (while basic01 assignment returned the
file-descriptor to the first BPF-prog).

The struct =bpf_object= represents ELF object itself.

** Lesson#2: bpf_object to bpf_program

In [[file:xdp_loader.c]] the function =__load_bpf_and_xdp_attach()= use
=bpf_object__find_program_by_title()= on the bpf_object, which is the "SEC"
name, not the C-function name. This returns an struct =bpf_program= object,
and we use the function =bpf_program__fd()= is used for getting the
file-descriptor that we want to attach to the XDP hook.

* Assignments

** Assignment#1: Setup testlab

As this lesson involves loading and selecting an XDP program that simply
drops all packets (via action =XDP_DROP=), you need to establish a testlab
environment. In the directory [[file:../testenv/][testenv/]] there is a script =testenv.sh= that
helps you setup a testlab based on =veth= and network namespaces.

E.g. run the script like:
#+begin_example sh
$ sudo ./testenv.sh --name veth-basic0 setup
Setting up new environment 'veth-basic02'
Setup environment 'veth-basic02' with peer ip fc00:dead:cafe:1::2.
#+end_example

This result in the creation of an (outer) interface named: =veth-basic02=.
You can test that the environment network is operational by pinging the IPv6
address =fc00:dead:cafe:1::2=.

The *assignment* is to manually load the compiled xdp program in ELF-OBJ file
=xdp_prog_kern.o=, using the =xdp_loader= program in this directory. Observe
the available options you can give the xdp_loader via =--help=. Try to
select the program section named =xdp_drop= via =--progsec=, and observe via
ping that packets gets dropped.

Here are some example commands:
#+begin_example sh
sudo ./xdp_loader --help
sudo ./xdp_loader --dev veth-basic02
sudo ./xdp_loader --dev veth-basic02 --force --progsec xdp_drop
sudo ./xdp_loader --dev veth-basic02 --force --progsec xdp_pass
#+end_example

** Assignment#2: Add xdp_abort program

Add a new program section "xdp_abort" in [[file:xdp_prog_kern.c]] that
use/return the XDP action =XDP_ABORTED= (and compile via =make=).
Load this new program, e.g. similar to above:

#+begin_example sh
sudo ./xdp_loader --dev veth-basic02 --force --progsec xdp_abort
#+end_example

*Lesson*: XDP_ABORTED is different from XDP_DROP, because it trigger the
tracepoint named =xdp:xdp_exception=.

*Exercise*: while e.g. ping the namespace, record this tracepoint and
observe these records. E.g with perf like this:

#+begin_example sh
sudo perf record -a -e xdp:xdp_exception sleep 4
sudo perf script
#+end_example

